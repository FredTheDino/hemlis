---
source: src/parser.rs
expression: "p_module(r#\"\nmodule A.B.C (a, class B, C, D(..), E(F, G), \n (+), type (+), module H) where\n\nimport A\nimport A as A\nimport A.B.C as A.C\nimport A.B.C (a, class B, \n C, D(..), E(F, G), (+), type (+))\nimport A.B.C hiding (foo)\n        \"#)"
---
81 of 81
===
Module
 Header
  MName
   (1, 7)->(1, 12)
   Export::Value
    Name
     (1, 14)->(1, 15)
   Export::Class
    ProperName
     (1, 23)->(1, 24)
   Export::Typ
    ProperName
     (1, 26)->(1, 27)
   Export::TypDat
    ProperName
     (1, 29)->(1, 30)
    DataMember::All
   Export::TypDat
    ProperName
     (1, 36)->(1, 37)
    DataMember::Some
      ProperName
       (1, 38)->(1, 39)
      ProperName
       (1, 41)->(1, 42)
   Export::Symbol
    Symbol
     (2, 1)->(2, 4)
   Export::TypSymbol
    Symbol
     (2, 11)->(2, 14)
   Export::Module
    MName
     (2, 23)->(2, 24)
   ImportDecl
    MName
     (4, 7)->(4, 8)
    NULL
   ImportDecl
    MName
     (5, 7)->(5, 8)
    MName
     (5, 12)->(5, 13)
   ImportDecl
    MName
     (6, 7)->(6, 12)
    MName
     (6, 16)->(6, 19)
   ImportDecl
    MName
     (7, 7)->(7, 12)
     Import::Value
      Name
       (7, 14)->(7, 15)
     Import::Class
      ProperName
       (7, 23)->(7, 24)
     Import::Typ
      ProperName
       (8, 1)->(8, 2)
     Import::TypDat
      ProperName
       (8, 4)->(8, 5)
      DataMember::All
     Import::TypDat
      ProperName
       (8, 11)->(8, 12)
      DataMember::Some
        ProperName
         (8, 13)->(8, 14)
        ProperName
         (8, 16)->(8, 17)
     Import::Symbol
      Symbol
       (8, 20)->(8, 23)
     Import::TypSymbol
      Symbol
       (8, 30)->(8, 33)
    NULL
   ImportDecl
    MName
     (9, 7)->(9, 12)
     Import::Value
      Name
       (9, 21)->(9, 24)
    NULL
===
